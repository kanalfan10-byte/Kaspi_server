from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
import requests

app = FastAPI()

# --- –¢–í–û–ô TELEGRAM ---
TELEGRAM_BOT_TOKEN = "8135133326:AAH1sRHovfzjRcyeDGqeCALoMF_qvwS4C6k"
TELEGRAM_CHAT_ID = "5070282357"

# --- –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï ---
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "ramazan2025"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–ø—Ä–æ—Å—Ç–æ –ø–æ IP ‚Äî –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ)
authorized_ips = set()

# --- –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ---
def send_telegram_message(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        requests.post(url, data=data, timeout=10)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)

# --- –ü–ê–†–°–ò–ù–ì –°–£–ú–ú–´ ---
def parse_amount(data: dict) -> int:
    for key in ("amount", "sum", "value", "total"):
        if key in data:
            try:
                return int(float(data[key]))
            except Exception:
                pass
    return 0

# --- –°–¢–ê–†–¢–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ---
@app.get("/", response_class=HTMLResponse)
async def login_page():
    return """
    <html><body>
    <h2>–í—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç</h2>
    <form method=\"post\" action=\"/login\">
      –õ–æ–≥–∏–Ω: <input type=\"text\" name=\"username\"><br>
      –ü–∞—Ä–æ–ª—å: <input type=\"password\" name=\"password\"><br>
      <input type=\"submit\" value=\"–í–æ–π—Ç–∏\">
    </form>
    </body></html>
    """

# --- –û–ë–†–ê–ë–û–¢–ö–ê –õ–û–ì–ò–ù–ê ---
@app.post("/login")
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    client_ip = request.client.host
    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        authorized_ips.add(client_ip)
        return RedirectResponse(url="/panel", status_code=302)
    return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", status_code=401)

# --- –ü–ê–ù–ï–õ–¨ (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω) ---
@app.get("/panel", response_class=HTMLResponse)
async def control_panel(request: Request):
    client_ip = request.client.host
    if client_ip not in authorized_ips:
        return RedirectResponse(url="/", status_code=302)
    return """
    <html><body>
    <h2>–¢–µ—Å—Ç –æ–ø–ª–∞—Ç—ã Kaspi</h2>
    <form method=\"post\" action=\"/test\">
      <input type=\"submit\" value=\"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –æ–ø–ª–∞—Ç—ã\">
    </form>
    </body></html>
    """

# --- –¢–ï–°–¢–û–í–ê–Ø –û–ü–õ–ê–¢–ê ---
@app.post("/test")
async def test_payment():
    dummy_data = {"amount": 300, "from": "–¢–ï–°–¢–ï–†"}
    amount = parse_amount(dummy_data)
    games = amount // 100
    send_telegram_message(f"üí∏ –¢–ï–°–¢–û–í–ê–Ø –û–ü–õ–ê–¢–ê!\n–°—É–º–º–∞: {amount}‚Ç∏\n–ò–≥—Ä—ã: {games}\n–î–∞–Ω–Ω—ã–µ: {dummy_data}")
    return RedirectResponse(url="/panel", status_code=302)

# --- –ù–ê–°–¢–û–Ø–©–ê–Ø –û–ü–õ–ê–¢–ê –û–¢ KASPI ---
@app.post("/payment")
async def payment_handler(request: Request):
    data = await request.json()
    print("–ü–æ–ª—É—á–µ–Ω–æ:", data)

    amount = parse_amount(data)
    if amount <= 0:
        send_telegram_message(f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –±–µ–∑ —Å—É–º–º—ã: {data}")
        raise HTTPException(status_code=400, detail="No valid amount in JSON.")

    if amount % 100 != 0:
        send_telegram_message(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ {amount}‚Ç∏ (–Ω–µ –∫—Ä–∞—Ç–Ω–æ 100). –î–∞–Ω–Ω—ã–µ: {data}")
        raise HTTPException(status_code=400, detail="Amount must be multiple of 100.")

    games = amount // 100
    send_telegram_message(
        f"üí∏ –û–ø–ª–∞—Ç–∞ Kaspi!\n"
        f"–°—É–º–º–∞: {amount}‚Ç∏\n"
        f"–ò–≥—Ä—ã: {games}\n"
        f"–î–∞–Ω–Ω—ã–µ: {data}"
    )
    print(f"–ù–∞–¥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å {games} –∏–≥—Ä (ESP32 –ø–æ–∑–∂–µ).")
    return {"ok": True, "amount": amount, "games": games}
    

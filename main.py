from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import HTMLResponse, RedirectResponse
import requests, sqlite3, os
from datetime import datetime

app = FastAPI()

# --- –ö–û–ù–§–ò–ì ---
TELEGRAM_BOT_TOKEN = "8135133326:AAH1sRHovfzjRcyeDGqeCALoMF_qvwS4C6k"
TELEGRAM_CHAT_ID = "5070282357"
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "ramazan2025"

DB_FILE = "payments.db"
authorized_ips = set()


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ---
def init_db():
    if not os.path.exists(DB_FILE):
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                payment_id TEXT,
                amount INTEGER,
                games INTEGER,
                timestamp TEXT,
                raw_json TEXT
            )
        """)
        conn.commit()
        conn.close()

init_db()


# --- –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ---
def send_telegram_message(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        requests.post(url, data=data, timeout=10)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Telegram:", e)


# --- –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î ---
def save_payment(payment_id, amount, games, raw_json):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO payments (payment_id, amount, games, timestamp, raw_json) VALUES (?, ?, ?, ?, ?)",
                   (payment_id, amount, games, datetime.now().isoformat(), str(raw_json)))
    conn.commit()
    conn.close()


# --- –ü–ê–†–°–ò–ù–ì –°–£–ú–ú–´ ---
def parse_amount(data: dict) -> int:
    try:
        return int(float(data.get("data", {}).get("amount", 0)))
    except:
        return 0


# --- –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°: –í–•–û–î ---
@app.get("/", response_class=HTMLResponse)
async def login_page():
    return """
    <html><head><title>Kaspi –í—Ö–æ–¥</title></head><body>
    <form method="post" action="/login">
        <input name="username" placeholder="–õ–æ–≥–∏–Ω" required><br>
        <input name="password" placeholder="–ü–∞—Ä–æ–ª—å" type="password" required><br>
        <button type="submit">–í–æ–π—Ç–∏</button>
    </form></body></html>
    """


# --- –õ–û–ì–ò–ù ---
@app.post("/login")
async def login(request: Request, username: str = Form(...), password: str = Form(...)):
    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        authorized_ips.add(request.client.host)
        return RedirectResponse("/panel", status_code=302)
    return HTMLResponse("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", status_code=401)


# --- –ü–ê–ù–ï–õ–¨ ---
@app.get("/panel", response_class=HTMLResponse)
async def panel(request: Request):
    if request.client.host not in authorized_ips:
        return RedirectResponse("/", status_code=302)

    return """
    <html><body>
    <h2>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
    <form method="post" action="/test">
        <button type="submit">–¢–µ—Å—Ç –æ–ø–ª–∞—Ç–∞</button>
    </form>
    <form method="post" action="/logout">
        <button type="submit">–í—ã–π—Ç–∏</button>
    </form>
    </body></html>
    """


# --- –í–´–•–û–î ---
@app.post("/logout")
async def logout(request: Request):
    authorized_ips.discard(request.client.host)
    return RedirectResponse("/", status_code=302)


# --- –¢–ï–°–¢–û–í–ê–Ø –û–ü–õ–ê–¢–ê ---
@app.post("/test")
async def test_payment():
    test_data = {
        "event": "payment.success",
        "data": {
            "paymentId": "TEST123",
            "amount": 500,
            "qrId": "kaspi-test",
            "timestamp": datetime.now().isoformat()
        }
    }
    return await payment_handler(Request(scope={"type": "http"}, receive=None), test_data)


# --- –ü–†–ò–Å–ú –ù–ê–°–¢–û–Ø–©–ï–ô –û–ü–õ–ê–¢–´ ---
@app.post("/payment")
async def payment_handler(request: Request, data: dict = None):
    if not data:
        data = await request.json()

    print("–ü–æ–ª—É—á–µ–Ω–æ:", data)

    amount = parse_amount(data)
    if amount <= 0:
        send_telegram_message(f"‚ö†Ô∏è –ù–µ—Ç —Å—É–º–º—ã!\n{data}")
        raise HTTPException(status_code=400, detail="–ù–µ—Ç —Å—É–º–º—ã.")

    if amount % 100 != 0:
        send_telegram_message(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞: {amount}‚Ç∏ (–Ω–µ –∫—Ä–∞—Ç–Ω–∞ 100)")
        raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 100.")

    games = amount // 100
    payment_id = data.get("data", {}).get("paymentId", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    save_payment(payment_id, amount, games, data)

    send_telegram_message(
        f"üí∏ –û–ø–ª–∞—Ç–∞ Kaspi!\n"
        f"–°—É–º–º–∞: {amount}‚Ç∏\n"
        f"–ò–≥—Ä—ã: {games}\n"
        f"ID: {payment_id}"
    )

    return {"ok": True, "amount": amount, "games": games}

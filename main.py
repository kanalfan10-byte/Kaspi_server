from fastapi import FastAPI, Request, HTTPException
import requests

app = FastAPI()

# --- –¢–í–û–ô TELEGRAM ---
TELEGRAM_BOT_TOKEN = "8135133326:AAH1sRHovfzjRcyeDGqeCALoMF_qvwS4C6k"
TELEGRAM_CHAT_ID = "5070282357"

def send_telegram_message(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–≤–æ–π Telegram —á–∞—Ç."""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        requests.post(url, data=data, timeout=10)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)

def parse_amount(data: dict) -> int:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å —Å—É–º–º—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –≤ —Ç–µ–Ω–≥–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ) –∏–ª–∏ 0.
    """
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π: amount, sum, value, total
    for key in ("amount", "sum", "value", "total"):
        if key in data:
            try:
                return int(float(data[key]))
            except Exception:
                pass
    return 0

@app.post("/payment")
async def payment_handler(request: Request):
    data = await request.json()
    print("–ü–æ–ª—É—á–µ–Ω–æ:", data)

    amount = parse_amount(data)
    if amount <= 0:
        # –Ω–µ—Ç —Å—É–º–º—ã ‚Äì –∏–≥–Ω–æ—Ä
        send_telegram_message(f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –±–µ–∑ —Å—É–º–º—ã: {data}")
        raise HTTPException(status_code=400, detail="No valid amount in JSON.")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 100
    if amount % 100 != 0:
        send_telegram_message(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞ {amount}‚Ç∏ (–Ω–µ –∫—Ä–∞—Ç–Ω–æ 100). –î–∞–Ω–Ω—ã–µ: {data}")
        raise HTTPException(status_code=400, detail="Amount must be multiple of 100.")

    games = amount // 100

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    send_telegram_message(
        f"üí∏ –û–ø–ª–∞—Ç–∞ Kaspi!\n"
        f"–°—É–º–º–∞: {amount}‚Ç∏\n"
        f"–ò–≥—Ä—ã: {games}\n"
        f"–î–∞–Ω–Ω—ã–µ: {data}"
    )

    # –ø–æ–∫–∞ ESP32 –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç—å. –ü–æ—Ç–æ–º —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç.
    print(f"–ù–∞–¥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å {games} –∏–≥—Ä (ESP32 –ø–æ–∑–∂–µ).")

    return {"ok": True, "amount": amount, "games": games}
